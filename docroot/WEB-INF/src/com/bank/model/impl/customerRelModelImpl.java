/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bank.model.impl;

import com.bank.model.customerRel;
import com.bank.model.customerRelModel;
import com.bank.model.customerRelSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the customerRel service. Represents a row in the &quot;bankcapital_customerRel&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.bank.model.customerRelModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link customerRelImpl}.
 * </p>
 *
 * @author priyanka
 * @see customerRelImpl
 * @see com.bank.model.customerRel
 * @see com.bank.model.customerRelModel
 * @generated
 */
@JSON(strict = true)
public class customerRelModelImpl extends BaseModelImpl<customerRel>
	implements customerRelModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a customer rel model instance should use the {@link com.bank.model.customerRel} interface instead.
	 */
	public static final String TABLE_NAME = "bankcapital_customerRel";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uId", Types.BIGINT },
			{ "customerId", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table bankcapital_customerRel (uId LONG not null primary key,customerId VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table bankcapital_customerRel";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.bank.model.customerRel"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.bank.model.customerRel"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static customerRel toModel(customerRelSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		customerRel model = new customerRelImpl();

		model.setUId(soapModel.getUId());
		model.setCustomerId(soapModel.getCustomerId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<customerRel> toModels(customerRelSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<customerRel> models = new ArrayList<customerRel>(soapModels.length);

		for (customerRelSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.bank.model.customerRel"));

	public customerRelModelImpl() {
	}

	public long getPrimaryKey() {
		return _uId;
	}

	public void setPrimaryKey(long primaryKey) {
		setUId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_uId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return customerRel.class;
	}

	public String getModelClassName() {
		return customerRel.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uId", getUId());
		attributes.put("customerId", getCustomerId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long uId = (Long)attributes.get("uId");

		if (uId != null) {
			setUId(uId);
		}

		String customerId = (String)attributes.get("customerId");

		if (customerId != null) {
			setCustomerId(customerId);
		}
	}

	@JSON
	public long getUId() {
		return _uId;
	}

	public void setUId(long uId) {
		_uId = uId;
	}

	@JSON
	public String getCustomerId() {
		if (_customerId == null) {
			return StringPool.BLANK;
		}
		else {
			return _customerId;
		}
	}

	public void setCustomerId(String customerId) {
		_customerId = customerId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			customerRel.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public customerRel toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (customerRel)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		customerRelImpl customerRelImpl = new customerRelImpl();

		customerRelImpl.setUId(getUId());
		customerRelImpl.setCustomerId(getCustomerId());

		customerRelImpl.resetOriginalValues();

		return customerRelImpl;
	}

	public int compareTo(customerRel customerRel) {
		long primaryKey = customerRel.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		customerRel customerRel = null;

		try {
			customerRel = (customerRel)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = customerRel.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<customerRel> toCacheModel() {
		customerRelCacheModel customerRelCacheModel = new customerRelCacheModel();

		customerRelCacheModel.uId = getUId();

		customerRelCacheModel.customerId = getCustomerId();

		String customerId = customerRelCacheModel.customerId;

		if ((customerId != null) && (customerId.length() == 0)) {
			customerRelCacheModel.customerId = null;
		}

		return customerRelCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{uId=");
		sb.append(getUId());
		sb.append(", customerId=");
		sb.append(getCustomerId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.bank.model.customerRel");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uId</column-name><column-value><![CDATA[");
		sb.append(getUId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerId</column-name><column-value><![CDATA[");
		sb.append(getCustomerId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = customerRel.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			customerRel.class
		};
	private long _uId;
	private String _customerId;
	private customerRel _escapedModelProxy;
}